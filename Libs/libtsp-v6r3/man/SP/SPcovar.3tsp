.TH SPcovar 3tsp "TSP (libtsp/SP)"
.SH Routine
.in +4n
.ti -4n
void SPcovar (x, Nx, Cov, Np)
.in -4n
.SH Purpose
.in +4n
.ti -4n
Calculate a correlation (covariance) matrix for a data sequence
.in -4n
.SH Description
This routine fills in the elements of a correlation matrix given an array of
data.  The elements of the matrix are calculated as
.ft CW
.nf
.ne 3
           N+Np-1
  C(i,j) =  SUM x(n-i) x(n-j) ,    0 <= i,j <= Np
            n=Np
.fi
.ft P
where Np is the number of correlation lags and N is the number of terms in
each correlation calculation.  To compute the correlation terms, the
following recursion is used,
.PP
.ft CW
.nf
.ne 3
  C(i,j) = C(i-1,j-1) + x(Np-i) x(Np-j) - x(N+Np-i) x(N+Np-j) ,
.fi
.ft P
.PP
starting from C(i,0)=C(0,i).  Note that finite precision effects in
calculating the recursion can result in a non-positive definite matrix.
.SH Parameters
.in +4n
.ti -4n
 -> const float x[]
.br
Input data (Nx elements).  The first Np values normally represent data
from a previous frame of data.
.ti -4n
 -> int Nx
.br
Number of data elements.  Nx=N+Np, where N is the number of terms in
each correlation sum and Np is the number of correlation lags to be
calculated.  Note that Nx must be larger than Np.
.ti -4n
<-  float *Cov[]
.br
Cov is an array of pointers to the rows of a Np+1 by Np+1 matrix.  On
return, the (symmetric) matrix contains the correlation values.
.ti -4n
 -> int Np
.br
Maximum correlation lag
.in -4n
.SH Author / revision
P. Kabal
/ Revision 1.10  2003/05/09
.SH See Also
SPautoc,
libtsp
