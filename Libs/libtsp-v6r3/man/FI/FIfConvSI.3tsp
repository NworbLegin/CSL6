.TH FIfConvSI 3tsp "TSP (libtsp/FI)"
.SH Routine
.in +4n
.ti -4n
void FIfConvSI (const float x[], float y[], int Nout, const float h[],
int Ncof, int mr, int Nsub, int Ir)
.in -4n
.SH Purpose
.in +4n
.ti -4n
Filter a signal with an FIR filter (sample rate change)
.in -4n
.SH Description
This procedure convolves a set of filter coefficients with an array of data.
Optionally, the input signal can be interpolated before filtering, and the
output signal can be subsampled.
.PP
The process of interpolation is equivalent to the conceptual notion of
inserting Ir-1 zeros between each element of the input array.  This increased
rate signal array is convolved with the filter coefficients.  Since the
increased rate signal array has imbedded zeros, only every Ir'th filter
coefficient is involved in producing a given output point.  These
coefficients can be considered to constitute a sub-filter.  Sub-filters
are used in a round-robin fashion to produce successive output points.
.PP
The process of subsampling is equivalent to keeping only every Nsub'th output
point.  The filter slides along Nsub elements at a time in the increased rate
(interpolated) signal array for every point that is stored in the output
array.
.PP
The input array is x[.].  The first lmem = (Ncof-1)/Ir samples of x[.] are
past inputs.  Let the increased rate array be xi[.].  Then, xi[l*Ir]=x[l],
with other elements in xi[.] being zero.  The relationship between indices
of  x[l] and xi[m] is m=l*Ir+mr, or l=floor(m/Ir), mr=m-l*Ir.  The first
output point is calculated with filter coefficient h[0] aligned with sample
xi[Ir*lmem+mr], or equivalently, h[mr] aligned with sample x[lmem].  The
last output point is calculated with h[0] aligned with the sample
xi[Ir*lmem+mr+(Nout-1)*Nsub].
.PP
If Nout output values are to be calculated, the input array x[.] must have Nx
elements, where Nx is determined from
.ft CW
.nf
.ne 3
  lmem*Ir+mr+(Nout-1)*Nsub <= Ir*Nx-1
.fi
.ft P
From this relationship,
.ft CW
.nf
.ne 3
  Nx = lmem + ceil((mr+1+(Nout-1)*Nsub)/Ir)
     = lmem + floor((mr+(Nout-1)*Nsub)/Ir) + 1
.fi
.ft P
Conversely if the input array has Nx elements, the number of output samples
that can be calculated as
.ft CW
.nf
.ne 3
  Nout = floor((Ir*(Nx-lmem)-1-mr)/Nsub) + 1
       = ceil((Ir*(Nx-lmem)-mr)/Nsub).
.fi
.ft P
.SH Parameters
.in +4n
.ti -4n
 -> const float x[]
.br
Input array of data.  Let lmem=(Ncof-1)/Ir.  The first output point is
calculated as follows
.ft CW
.nf
.ne 3
  y[0] = h[mr]*x[lmem] + h[mr+Ir]*x[lmem-1]
                       + h[mr+2*Ir]*x[lmem-2] + ...
.fi
.ft P
The array x must have at least lmem+((Nout-1)*Nsub+mr)/Ir+1 elements.
.ti -4n
<-  const float y[]
.br
Array of output samples
.ti -4n
 -> int Nout
.br
Number of output samples to be calculated
.ti -4n
 -> const float h[]
.br
Array of Ncof filter coefficients
.ti -4n
 -> int Ncof
.br
Number of filter coefficients
.ti -4n
 -> int mr
.br
Filter coefficient offset.  The first output point has filter coefficient
h[mr] aligned with data element x[lmem].  Normally mr is in the range 0
to Ir-1.
.ti -4n
 -> int Nsub
.br
Subsampling ratio.  Only every Nsub'th filtered output is calculated for
the interpolated sequence and stored in the output array.
.ti -4n
 -> int Ir
.br
Interpolating ratio.  Conceptually, Ir-1 zeros are inserted between each
element of the input array to create an interpolated sequence before
convolving with the filter coefficients.
.in -4n
.SH Author / revision
P. Kabal
/ Revision 1.17  2005/02/01
.SH See Also
FIfConvol,
libtsp
