.TH FIfDeem 3tsp "TSP (libtsp/FI)"
.SH Routine
.in +4n
.ti -4n
void FIfDeem (double a, float *Fmem, const float x[], float y[], int Nout)
.in -4n
.SH Purpose
.in +4n
.ti -4n
Deemphasize a signal using a first order recursive filter
.in -4n
.SH Description
The procedure processes an input signal using a first order recursive filter.
The output is formed as follows.
.ft CW
.nf
.ne 3
  y[n] = x[n] + a * y[n-1] .
.fi
.ft P
The deemphasis factor a is zero for no filtering and equal to one for a full
digital integrator.  The filter memory Fmem is used to store the previous
output value.  Before processing any data, it is typically set to zero.  On
return Fmem is equal to the last output value.  For block processing of a
signal, the value of Fmem from one call is suitable as input to the next
call.
.SH Parameters
.in +4n
.ti -4n
 -> double a
.br
Deemphasis factor
.ti -4n
<-> float *Fmem
.br
Filter memory value. Fmem is the last output value from the last block
processed (initially set to zero).  On return it is set to the last
output value (y[Nout-1]).  For block processing of a signal, the value
returned from one invocation is suitable as input for the next
invocation.
.ti -4n
 -> const float x[]
.br
Input array of Nout data values.
.ti -4n
<-  float y[]
.br
Output array of Nout values.  This array can share storage with x.
.ti -4n
 -> int Nout
.br
Number of output samples to be calculated
.in -4n
.SH Author / revision
P. Kabal
/ Revision 1.7  2003/05/09
.SH See Also
FIfPreem,
libtsp
