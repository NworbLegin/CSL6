.TH FIfBiquad 3tsp "TSP (libtsp/FI)"
.SH Routine
.in +4n
.ti -4n
void FIfBiquad (const float x[], float y[], int Nout, const float h[5])
.in -4n
.SH Purpose
.in +4n
.ti -4n
Filter a signal using a biquadratic IIR filter
.in -4n
.SH Description
This procedure forms the output of an IIR filter.  The output
is a biquadratic section with the z-transform,
.PP
.ft CW
.nf
.ne 3
         h[0]*z^2 + h[1]*z + h[2]
  H(z) = ------------------------ .
           z^2 + h[3]*z + h[4]
.fi
.ft P
.PP
The output is formed using the following relationship,
.PP
.ft CW
.nf
.ne 3
  y[i] = h[0]*x[i] + h[1]*x[i-1] + h[2]*x[i-2]
                                 - h[3]*y[i-1] - h[4]*y[i-2] .
.fi
.ft P
.PP
The filtering procedure needs the present and past two input samples and the
past two output samples to form a new output sample.  These are supplied as
extensions to the input and output arrays.
.PP
The input array x and the output array y can share storage.  Consider an
array A with Nout+4 elements.  Let the first two elements (A[0] and A[1])
represent past output values.  The next two elements (A[2] and A[3]) are
past input values.  The next Nout elements starting with A[4] are new input
values.  In this case, this routine can be invoked as
.ft CW
.nf
.ne 3
  FIbiquad (&A[2], &A[0], Nout, h)
.fi
.ft P
On output Nout new output values are placed starting at A[2], overlaying the
input values.  The last two input values (A[Nout+2] and A[Nout+3]) remain
intact.  These along with the last two output values (A[Nout] and A[Nout+1])
are suitable for priming the array for processing the next group of samples.
This can be achieved by moving the top 4 elements of the array to the bottom
of the array and appending Nout new input values.
.SH Parameters
.in +4n
.ti -4n
 -> const float x[]
.br
Input array with Nout+2 elements.  The first two elements, x[0] and x[1],
represent past input samples.  The next Nout samples are the current
input samples.
.ti -4n
<-> float y[]
.br
Output array with Nout+2 elements.  The first two elements, y[0] and
y[1], represent past outputs and must be supplied as input. The remaining
Nout elements are defined by this routine.
.ti -4n
 -> int Nout
.br
Number of output samples
.ti -4n
 -> const float h[5]
.br
Array of 5 filter coefficients defining the biquadratic filter section
.in -4n
.SH Author / revision
P. Kabal
/ Revision 1.12  2003/05/09
.SH See Also
FIfFiltIIR,
libtsp
